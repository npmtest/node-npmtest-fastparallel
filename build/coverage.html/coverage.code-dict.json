{"/home/travis/build/npmtest/node-npmtest-fastparallel/test.js":"/* istanbul instrument in package npmtest_fastparallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fastparallel/lib.npmtest_fastparallel.js":"/* istanbul instrument in package npmtest_fastparallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fastparallel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fastparallel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fastparallel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fastparallel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fastparallel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fastparallel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fastparallel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fastparallel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fastparallel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fastparallel.__dirname + '/lib.npmtest_fastparallel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fastparallel/node_modules/fastparallel/parallel.js":"'use strict'\n\nvar xtend = require('xtend')\nvar reusify = require('reusify')\nvar defaults = {\n  released: nop,\n  results: true\n}\n\nfunction fastparallel (options) {\n  options = xtend(defaults, options)\n\n  var released = options.released\n  var queue = reusify(options.results ? ResultsHolder : NoResultsHolder)\n  var queueSingleCaller = reusify(SingleCaller)\n  var goArray = options.results ? goResultsArray : goNoResultsArray\n  var goFunc = options.results ? goResultsFunc : goNoResultsFunc\n\n  return parallel\n\n  function parallel (that, toCall, arg, done) {\n    var holder = queue.get()\n    done = done || nop\n    if (toCall.length === 0) {\n      done.call(that)\n      released(holder)\n    } else {\n      holder._callback = done\n      holder._callThat = that\n      holder._release = release\n\n      if (typeof toCall === 'function') {\n        goFunc(that, toCall, arg, holder)\n      } else {\n        goArray(that, toCall, arg, holder)\n      }\n\n      if (holder._count === 0) {\n        holder.release()\n      }\n    }\n  }\n\n  function release (holder) {\n    queue.release(holder)\n    released(holder)\n  }\n\n  function singleCallerRelease (holder) {\n    queueSingleCaller.release(holder)\n  }\n\n  function goResultsFunc (that, toCall, arg, holder) {\n    var singleCaller = null\n    holder._count = arg.length\n    holder._results = new Array(holder._count)\n    for (var i = 0; i < arg.length; i++) {\n      singleCaller = queueSingleCaller.get()\n      singleCaller._release = singleCallerRelease\n      singleCaller.parent = holder\n      singleCaller.pos = i\n      if (that) {\n        toCall.call(that, arg[i], singleCaller.release)\n      } else {\n        toCall(arg[i], singleCaller.release)\n      }\n    }\n  }\n\n  function goResultsArray (that, funcs, arg, holder) {\n    var sc = null\n    var tc = nop\n    holder._count = funcs.length\n    holder._results = new Array(holder._count)\n    for (var i = 0; i < funcs.length; i++) {\n      sc = queueSingleCaller.get()\n      sc._release = singleCallerRelease\n      sc.parent = holder\n      sc.pos = i\n      tc = funcs[i]\n      if (that) {\n        if (tc.length === 1) tc.call(that, sc.release)\n        else tc.call(that, arg, sc.release)\n      } else {\n        if (tc.length === 1) tc(sc.release)\n        else tc(arg, sc.release)\n      }\n    }\n  }\n\n  function goNoResultsFunc (that, toCall, arg, holder) {\n    holder._count = arg.length\n    for (var i = 0; i < arg.length; i++) {\n      if (that) {\n        toCall.call(that, arg[i], holder.release)\n      } else {\n        toCall(arg[i], holder.release)\n      }\n    }\n  }\n\n  function goNoResultsArray (that, funcs, arg, holder) {\n    var toCall = null\n    holder._count = funcs.length\n    for (var i = 0; i < funcs.length; i++) {\n      toCall = funcs[i]\n      if (that) {\n        if (toCall.length === 1) {\n          toCall.call(that, holder.release)\n        } else {\n          toCall.call(that, arg, holder.release)\n        }\n      } else {\n        if (toCall.length === 1) {\n          toCall(holder.release)\n        } else {\n          toCall(arg, holder.release)\n        }\n      }\n    }\n  }\n}\n\nfunction NoResultsHolder () {\n  this._count = -1\n  this._callback = nop\n  this._callThat = null\n  this._release = null\n  this.next = null\n\n  var that = this\n  var i = 0\n  this.release = function () {\n    var cb = that._callback\n    if (++i === that._count || that._count === 0) {\n      if (that._callThat) {\n        cb.call(that._callThat)\n      } else {\n        cb()\n      }\n      that._callback = nop\n      that._callThat = null\n      that._release(that)\n      i = 0\n    }\n  }\n}\n\nfunction SingleCaller () {\n  this.pos = -1\n  this._release = nop\n  this.parent = null\n  this.next = null\n\n  var that = this\n  this.release = function (err, result) {\n    that.parent.release(err, that.pos, result)\n    that.pos = -1\n    that.parent = null\n    that._release(that)\n  }\n}\n\nfunction ResultsHolder () {\n  this._count = -1\n  this._callback = nop\n  this._results = null\n  this._err = null\n  this._callThat = null\n  this._release = nop\n  this.next = null\n\n  var that = this\n  var i = 0\n  this.release = function (err, pos, result) {\n    that._err = that._err || err\n    if (pos >= 0) {\n      that._results[pos] = result\n    }\n    var cb = that._callback\n    if (++i === that._count || that._count === 0) {\n      if (that._callThat) {\n        cb.call(that._callThat, that._err, that._results)\n      } else {\n        cb(that._err, that._results)\n      }\n      that._callback = nop\n      that._results = null\n      that._err = null\n      that._callThat = null\n      i = 0\n      that._release(that)\n    }\n  }\n}\n\nfunction nop () { }\n\nmodule.exports = fastparallel\n","/home/travis/build/npmtest/node-npmtest-fastparallel/node_modules/fastparallel/bench.js":"var max = 1000000\nvar parallel = require('./')()\nvar parallelNoResults = require('./')({ results: false })\nvar bench = require('fastbench')\nvar async = require('async')\nvar neo = require('neo-async')\nvar insync = require('insync')\nvar items = require('items')\nvar parallelize = require('parallelize')\n\nfunction benchFastParallel (done) {\n  parallel(null, [somethingP, somethingP, somethingP], 42, done)\n}\n\nfunction benchFastParallelNoResults (done) {\n  parallelNoResults(null, [somethingP, somethingP, somethingP], 42, done)\n}\n\nfunction benchFastParallelEach (done) {\n  parallelNoResults(null, somethingP, [1, 2, 3], done)\n}\n\nfunction benchFastParallelEachResults (done) {\n  parallel(null, somethingP, [1, 2, 3], done)\n}\n\nfunction benchAsyncParallel (done) {\n  async.parallel([somethingA, somethingA, somethingA], done)\n}\n\nfunction benchInsyncParallel (done) {\n  insync.parallel([somethingA, somethingA, somethingA], done)\n}\n\nfunction benchNeoParallel (done) {\n  neo.parallel([somethingA, somethingA, somethingA], done)\n}\n\nfunction benchItemsParallel (done) {\n  items.parallel.execute([somethingA, somethingA, somethingA], done)\n}\n\nfunction benchParallelize (done) {\n  var next = parallelize(done)\n\n  somethingA(next())\n  somethingA(next())\n  somethingA(next())\n}\n\nfunction benchAsyncEach (done) {\n  async.each([1, 2, 3], somethingP, done)\n}\n\nfunction benchNeoEach (done) {\n  neo.each([1, 2, 3], somethingP, done)\n}\n\nfunction benchAsyncMap (done) {\n  async.map([1, 2, 3], somethingP, done)\n}\n\nfunction benchNeoMap (done) {\n  neo.map([1, 2, 3], somethingP, done)\n}\n\nfunction benchInsyncEach (done) {\n  insync.each([1, 2, 3], somethingP, done)\n}\n\nfunction benchInsyncMap (done) {\n  insync.map([1, 2, 3], somethingP, done)\n}\n\nvar nextDone\nvar nextCount\n\nfunction benchSetImmediate (done) {\n  nextCount = 3\n  nextDone = done\n  setImmediate(somethingImmediate)\n  setImmediate(somethingImmediate)\n  setImmediate(somethingImmediate)\n}\n\nfunction somethingImmediate () {\n  nextCount--\n  if (nextCount === 0) {\n    nextDone()\n  }\n}\n\nfunction somethingP (arg, cb) {\n  setImmediate(cb)\n}\n\nfunction somethingA (cb) {\n  setImmediate(cb)\n}\n\nvar run = bench([\n  benchSetImmediate,\n  benchAsyncParallel,\n  benchAsyncEach,\n  benchAsyncMap,\n  benchNeoParallel,\n  benchNeoEach,\n  benchNeoMap,\n  benchInsyncParallel,\n  benchInsyncEach,\n  benchInsyncMap,\n  benchItemsParallel,\n  benchParallelize,\n  benchFastParallel,\n  benchFastParallelNoResults,\n  benchFastParallelEachResults,\n  benchFastParallelEach\n], max)\n\nrun(run)\n","/home/travis/build/npmtest/node-npmtest-fastparallel/node_modules/fastparallel/bench_long.js":"var max = 1000000\nvar parallel = require('./')()\nvar parallelNoResults = require('./')({ results: false })\nvar bench = require('fastbench')\nvar async = require('async')\nvar neo = require('neo-async')\n\nvar funcs = []\n\nfor (var i = 0; i < 25; i++) {\n  funcs.push(something)\n}\n\nfunction benchFastParallel (done) {\n  parallel(null, funcs, 42, done)\n}\n\nfunction benchFastParallelNoResults (done) {\n  parallelNoResults(null, funcs, 42, done)\n}\n\nfunction benchAsyncParallel (done) {\n  async.parallel(funcs, done)\n}\n\nfunction benchNeoParallel (done) {\n  neo.parallel(funcs, done)\n}\n\nfunction something (cb) {\n  setImmediate(cb)\n}\n\nvar run = bench([\n  benchAsyncParallel,\n  benchNeoParallel,\n  benchFastParallel,\n  benchFastParallelNoResults\n], max)\n\nrun(run)\n"}